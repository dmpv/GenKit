{# A template to generate initializer #}
import Foundation
import UIKit

{% for type in types.implementing.AutoMakeable|struct|public %}
{% set spacing %}{% if type.parentName %}    {% endif %}{% endset %}
{% map type.storedVariables into defaults using var %}{% if var.defaultValue %}{{ var.name }}: {% if var.type.name %}{{ var.type.name }}{% if var.typeName.isOptional %}?{% endif %}{% else %}{{ var.typeName }}{% endif %} = {{ var.defaultValue }}{% elif var.typeName.isOptional %}{{ var.name }}: {% if var.type.name %}{{ var.type.name }}{% if var.typeName.isOptional %}?{% endif %}{% else %}{{ var.typeName }}{% endif %} = nil{% endif %}{% endmap %}
{% map type.storedVariables into parameters using var %}{{ var.name }}: {% if var.type.name %}{{ var.type.name }}{% if var.typeName.isOptional %}?{% endif %}{% else %}{{ var.typeName }}{% endif %}{% if var.defaultValue %} = Defaults.{{ var.name }}{% elif var.typeName.isOptional %} = Defaults.{{ var.name }}{% endif %}{% endmap %}
extension {{ type.name }} {
    {{ type.accessLevel }} enum Defaults {
        {% for default in defaults %}{% if default %}{{ type.accessLevel }} static let {{ default }}{% endif %}
        {% endfor %}
    }

    {{ type.accessLevel }} static func make(
        {% for parameter in parameters %}{{ parameter }}{% if not forloop.last %},
        {% endif %}{% endfor %}
    ) -> Self {
        .init(
            {% for variable in type.storedVariables %}
            {{ variable.name }}: {{ variable.name }}{% if not forloop.last %},
            {% endif %}
            {% endfor %}
        )
    }
}
{% if not forloop.last %}

{% endif %}
{% endfor %}
